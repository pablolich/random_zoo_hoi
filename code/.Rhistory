dt <- read.table("../data/timescalesepareation.txt", sep = " ", header = T)
dt <- read.table("../data/timescalesepareation.txt", sep = " ", header = T)
dt
dt <- read.table("../data/timescalesepareation.txt", sep = "\t", header = T)
dt <- read.table("../data/timescalesepareation.txt", sep = "\t", header = T)
dt <- read.table("../data/timescalesepareation.txt", sep = " ", header = T)
dt <- read.table("../data/timescalesepareation.txt", sep = "", header = T)
dt
x1dat = dt %>% select(t, x1)
x1dat
x1polydat = dt %>% select(t, x1p)
x1polydat
x2polydat = dt %>% select(t, x2p)
write.table(x1dat, '../data/x1dat.dat', sep = " ", row.names = F,
quote = F)
x1dat
write.table(x2dat, '../data/x2dat.dat', sep = " ", row.names = F,
quote = F)
x2dat = dt %>% select(t, x2)
write.table(x2dat, '../data/x2dat.dat', sep = " ", row.names = F,
quote = F)
x1polydat = dt %>% select(t, x1p)
x2polydat = dt %>% select(t, x2p)
write.table(x1polydat, '../data/x1polydat.dat', sep = " ", row.names = F,
quote = F)
write.table(x2polydat, '../data/x2polydat.dat', sep = " ", row.names = F,
quote = F)
dt <- read.table("../data/timescaleseparaiton.csv", sep = "", header = T)
dt <- read.table("../data/timescaleseparaiton.csv", sep = " ", header = T)
dt <- read.table("../data/timescaleseparaiton.csv", sep = " ", header = F)
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
dt
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
dt <- read.table("../data/timescaleseparation.csv", sep = " ", header = F)
colnames(dt) = c("t", "x1", "x2", "x1p", "x2p")
x1dat = dt %>% select(t, x1)
x2dat = dt %>% select(t, x2)
x1polydat = dt %>% select(t, x1p)
x2polydat = dt %>% select(t, x2p)
x1dat
write.table(x1dat, '../data/x1dat.dat', sep = " ", row.names = F,
quote = F)
write.table(x2dat, '../data/x2dat.dat', sep = " ", row.names = F,
quote = F)
write.table(x1polydat, '../data/x1polydat.dat', sep = " ", row.names = F,
quote = F)
write.table(x2polydat, '../data/x2polydat.dat', sep = " ", row.names = F,
quote = F)
ggplot(dt, aes(x= x1, y = x2))+geom_point()
dt
ggplot(dt, aes(x= x1, y = x2))+geom_point()
ggplot(dt, aes(x = x1p, y = x2p))+geom_point()
ggplot(dt, aes(x= x1, y = x2))+geom_point()
ggplot(dt, aes(x = x1p, y = x2p))+geom_point()
dt %>% pivot_longer(cols = c(x1, x1p), names_to = c("values", "scale"))
dt %>% pivot_longer(cols = c(x1, x1p), values_to = "values", names_to = "scale")
dt %>% pivot_longer(cols = c(x1, x1p), values_to = "valuesx", names_to = "scalex") %>%
pivot_longer(cols = c(x2, x2p), values_to = "valuesy", names_to = "scaley")
ggplot(dt, aes(x= valuesx, y = valuesy))+geom_point(aes(color = scaley))
dt %>% pivot_longer(cols = c(x1, x1p), values_to = "valuesx", names_to = "scalex") %>%
pivot_longer(cols = c(x2, x2p), values_to = "valuesy", names_to = "scaley")
dt
dtplot = dt %>% pivot_longer(cols = c(x1, x1p), values_to = "valuesx", names_to = "scalex") %>%
pivot_longer(cols = c(x2, x2p), values_to = "valuesy", names_to = "scaley")
ggplot(dtplot, aes(x= valuesx, y = valuesy))+geom_point(aes(color = scaley))
tail(dt)
choose(5,3)
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return()
}
nmax = 6
nvar = c()
neq = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
}
nvar
neq
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 6
nvar = c()
neq = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
}
neq
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, neq^nvar)
lines(1:nmax, guess)
plot(1:nmax, nvar)
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 6
nvar = c()
neq = c()
guess = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
guess = c(guess, neqi^nvar)
}
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, guess)
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 6
nvar = c()
neq = c()
guess = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
guess = c(guess, neqi^nvar)
}
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, guess, 'blue')
guess
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 6
nvar = c()
neq = c()
guess = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
guess = c(guess, i^i)
}
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, guess, 'blue')
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 6
nvar = c()
neq = c()
guess = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
guess = c(guess, i^i)
}
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, guess)
neqs
neq
nvar
nvariables = function(n){
return(n*(n+1))
}
nequations = function(n){
neqs = 0
for (i in 1:n){
neqs = neqs + choose(i+n-1, n-1)
}
return(neqs)
}
nmax = 7
nvar = c()
neq = c()
guess = c()
for (i in 1:nmax){
nvari = nvariables(i)
neqi = nequations(i)
nvar = c(nvar, nvari)
neq = c(neq, neqi)
guess = c(guess, i^i)
}
plot(1:nmax, nvar)
lines(1:nmax, neq)
lines(1:nmax, guess)
nvar
neq
check(1)
check = function(n){
return(2*factorial(2*n-1)/(factorial(n)*factorial(n-1))-1)
}
check(1)
check(2)
check(3)
check2 = function(n){
return(choose(2*n, n))
}
check2(1)
check2(2)
check2(3)
check2(4)
check(4)
paste0("3", "hello")
paste0(3, "hello")
#write a program
sink("eq_", n, "_", d, ".r")
#write a program
sink(paste0("eq_", n, "_", d, ".r"))
#write a program
sink(paste0("eq_", n, "_", d, ".r"))
n=1
d=1
#write a program
sink(paste0("eq_", n, "_", d, ".r"))
cat("model <- function(x){\n")
sink()
sink("eqn.R")
i = 1
j <- i + 1
cat("model <- function(x){\n")
j <- i + 1
if (j > n) j <- 1
k <- i - 1
if (k == 0) k <- n
j
k
if (k == 0) k <- n
cat(paste0("F", i),"<-")
cat("model <- function(x){\n")
i = 1
sink("eqn.R")
cat("model <- function(x){\n")
j <- i + 1
if (j > n) j <- 1
k <- i - 1
if (k == 0) k <- n
cat(paste0("F", i),"<-")
ri <- paste0("r[", i, "]")
Aij <- paste0("A[", i, ",", j, "]")
Aki <- paste0("A[", k, ",", i, "]")
Aii <- paste0("A[", i, ",", i, "]")
xi <- paste0("x[", i, "]")
xj <- paste0("x[", j, "]")
xk <- paste0("x[", k, "]")
cat("(1+", Aij, "* abs(", xj, "))*(1 +", Aki, "* abs(", xi, "))*" )
cat("(", ri, "+", Aij, "*", xj, "/ ( 1 + ", Aij, "* abs(", xj, "))-", Aki, "*", xk, "/ (1 + " , Aki, "* abs(",  xi, "))-", Aii, "*", xi, ")")
#if (i < n) cat(",")
cat("\n")
sink()
paste0(rep(",",3))
rep(",",3)
rep(",",3)
sink()
rep(",",3)
paste0(rep(",",3))
paste0(rep(,,3))
Aki <- paste0("A[", k, ",", i, "]")
Aki
Aki <- paste0("A[", k, ",", ",",i, "]")
Aki
rep(",",3)
paste0(rep(",",3))
paste0(rep(",",3), collapse = T)
paste0(rep(",",3), collapse = "")
comas <- paste0(rep(",",d-1), collapse="")
d
d = 2
comas <- paste0(rep(",",d-1), collapse="")
comas
paste0("Fi(B[",i,comas,"]")
paste0("Fi(B[",i,comas,"])")
paste0("Fi(B[",i,comas,"],x)")
d=2
comas <- paste0(rep(",",d-1), collapse="")
paste0("Fi(B[",i,comas,"],x)")
d=3
comas <- paste0(rep(",",d-1), collapse="")
paste0("Fi(B[",i,comas,"],x)")
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
paste0("Fi(B[",i,comas,"],x),")
}
cat("))")
n=3
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
paste0("Fi(B[",i,comas,"],x),")
}
cat("))")
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
print(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))")
}
n
d
#write a program
sink(paste0("eq_", n, "_", d, ".r"))
cat("model <- function(B, x){\n")
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
paste0("Fi(B[",i,comas,"],x),")
}
cat("))")
cat("model <- function(B, x){\n")
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))")
#write a program
sink(paste0("eq_", n, "_", d, ".r"))
cat("model <- function(B, x){\n")
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))")
#write a program to outputing evaluations of model
sink(paste0("eq_", n, "_", d, ".r"))
#signature of function
cat("model <- function(B, x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}")
write_kss_model <- function(n, d){
#write a program to outputing evaluations of model
sink(paste0("eq_", n, "_", d, ".r"))
#signature of function
cat("model <- function(B, x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}")
#write a program to outputing evaluations of model
sink(paste0("eq_", n, "_", d, ".r"))
#signature of function
cat("model <- function(B, x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}")
write_kss_model <- function(n, d){
#write a program to outputing evaluations of model
sink(paste0("eq_", n, "_", d, ".r"))
#signature of function
cat("model <- function(x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}")
#now write another function to evaluate equation i of the model
cat("Fi <- function(x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
outerx <- paste0("x",rep("%o%x",d-2))
cat("Tx <- ", outerx)
cat("return(sum(B*Tx))\n}")
}
write_kss_model(3,3)
write_kss_model <- function(n, d){
sink(paste0("eq_", n, "_", d, ".r"))
#write function to evaluate equation i of the model
cat("Fi <- function(x){\n")
#meta-comment
cat("#evaluate model at given parameters B (globally), and abundances x\n")
outerx <- paste0("x",rep("%o%x",d-2))
cat("Tx <- ", outerx)
cat("\nreturn(sum(B*Tx))\n}")
#write function to outputing evaluations of model
#signature of function
cat("model <- function(x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}\n")
}
wirte_kss_model(3, 3)
write_kss_model(3, 3)
write_kss_model <- function(n, d){
sink(paste0("eq_", n, "_", d, ".r"))
#write function to evaluate equation i of the model
cat("Fi <- function(x){\n")
#meta-comment
cat("#evaluate model at given parameters B (globally), and abundances x\n")
outerx <- paste0("x",rep("%o%x",d-2))
cat("Tx <- ", outerx)
cat("\nreturn(sum(B*Tx))\n}\n\n")
#write function to outputing evaluations of model
#signature of function
cat("model <- function(x){\n")
#meta-comment
cat("#evaluate model at a given parameters B, and abundances x\n")
#return a vector of evaluations for each equation
cat("return(c(")
comas <- paste0(rep(",",d-1), collapse="")
for (i in 1:n){
cat(paste0("Fi(B[",i,comas,"],x),"))
}
cat("))\n}\n")
}
write_kss_model(3, 3)
B
#initialize tensor
B = array(rnorm(n^d), dims = d)
n
d
sink()
#initialize tensor
B = array(rnorm(n^d), dims = d)
#initialize tensor
B = array(rnorm(n^d), dims = (3,3,3))
#initialize tensor
B = array(rnorm(n^d), dim = (3,3,3))
rnorm(n^d)
sink()
rnorm(n^d)
h
2
2
2/4
sink()
2/4
sink()
